<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >
<web-app>
    <display-name>spring-mvc Web Application</display-name>

    <!--SpringMvc提供针对post请求的编码过滤器-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--配置SpringMbc请求方式转换过滤器，会检查请求参数中是否会有_method参数，如果有就按照指定的请求方式进行转换-->
    <filter>
        <filter-name>methodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>methodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <servlet-name>spring-mvc-servlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>spring-mvc-servlet</servlet-name>
        <!--
            方式一：带指定后缀的 比如:*.do *.action ... 这样只会拦截和后缀名相同的请求
            方式二：/ 不会拦截.jsp请求,但是会拦截.html、.css、.js等静态资源
                解决方案：
                    方案一：在spring配置文件中配置一个<mvc:default-servlet-handler/>
                        缺点：静态资源的位置有局限，只能放在webapp这个目录下，子目录也不行
                    方案二：在spring配置文件中配置一个<mvc:resources mapping="/resources/**" location="classpath:/"/>
                为什么配置为/会拦截静态资源？？？
                    因为tomcat容器中也有一个web.xml(父),而我们工程的web.xml(子)是继承自tomcat的
                    在父web.xml中有一个DefaultServlet,而其url-pattern也是/,此时我们工程的
                    web.xml复写了tomcat的web.xml,而父web.xml的那个DefaultServlet是专门处理静态资源
                    的一个Servlet,而我们工程将其复写了就会导致请求被我们工程的Servlet拦截了
                为什么不会拦截.jsp呢？？？
                    因为在父web.xml中有一个JspServlet，这个Servlet拦截.jsp文件，而我们并没有覆写这个配置，
                    所以此时spring mvc不拦截.jsp请求,而是交给了tomcat的JspServlet去处理
            方式三：/* 拦截所有，包括.jsp请求也会被拦截
        -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>
