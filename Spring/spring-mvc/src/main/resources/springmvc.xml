<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--扫描包路径-->
    <context:component-scan base-package="top.luhancc.springmvc.controller"/>

    <!--    配置servlet的视图解析器-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 自动注册最合适的处理器映射器、处理器适配器 -->
    <mvc:annotation-driven conversion-service="conversionServiceFactoryBean"/>

    <!--解决静态资源被拦截的方案一：
        原理：添加该标签后，会在SpringMvc上下文中定义一个DefaultServletHttpRequestHandler对象
             这个对象会对请求进行过滤筛查，如果发现是一个静态资源请求，那么会把请求转给tomcat进行处理
             如果不是静态资源请求，那么还是由SpringMvc进行处理
    -->
    <mvc:default-servlet-handler/>

    <!--静态资源配置，方案二：由SpringMvc自己处理静态资源
        如果请求是以/resources开头的，那么就会去classpath下面去找
        mapping：约定的静态资源的url规则
        location：指定的静态资源的存放路径
    -->
    <mvc:resources mapping="/resources/**" location="classpath:/"/>

    <!--注册自定义类型转换器-->
    <bean id="conversionServiceFactoryBean"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <!--注册自定义日期类型转换器-->
                <bean class="top.luhancc.springmvc.controller.param.DateParameterConverter"/>
            </set>
        </property>
    </bean>

    <!--注册自定义拦截器-->
    <mvc:interceptors>
        <!--这样表示MyInterceptor01会拦截所有的handle方法请求-->
        <!--<bean class="top.luhancc.springmvc.interceptor.MyInterceptor01"/>-->
        <mvc:interceptor>
            <!--表示拦截的请求规则-->
            <mvc:mapping path="/**"/>
            <!--表示不拦截请求的规则-->
            <!--<mvc:exclude-mapping path="/demo/**"/>-->
            <bean class="top.luhancc.springmvc.interceptor.MyInterceptor01"/>
        </mvc:interceptor>

        <mvc:interceptor>
            <!--表示拦截的请求规则-->
            <mvc:mapping path="/**"/>
            <bean class="top.luhancc.springmvc.interceptor.MyInterceptor02"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--文件上传解析器
        bean的名称固定为multipartResolver
    -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--文件上传的大小限制,默认为-1没有上限-->
        <property name="maxUploadSize" value="500000"/>
    </bean>
</beans>